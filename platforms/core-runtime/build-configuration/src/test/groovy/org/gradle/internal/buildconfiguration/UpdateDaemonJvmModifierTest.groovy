/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.internal.buildconfiguration

import org.gradle.api.JavaVersion
import org.gradle.internal.buildconfiguration.resolvers.ToolchainRepositoriesResolver
import org.gradle.internal.buildconfiguration.resolvers.UnconfiguredToolchainRepositoriesResolver
import org.gradle.internal.buildconfiguration.tasks.UpdateDaemonJvmModifier
import org.gradle.jvm.toolchain.JvmImplementation
import org.gradle.jvm.toolchain.JvmVendorSpec
import org.gradle.platform.Architecture
import org.gradle.platform.BuildPlatform
import org.gradle.platform.OperatingSystem
import org.gradle.platform.internal.CustomBuildPlatform
import org.gradle.test.fixtures.file.TestFile
import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
import org.gradle.util.TestUtil
import org.junit.Rule
import spock.lang.Specification

import javax.annotation.Nullable

class UpdateDaemonJvmModifierTest extends Specification {
    @Rule
    final TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider(getClass())

    final TestFile daemonJvmPropertiesFile = tmpDir.file(DaemonJvmPropertiesDefaults.DAEMON_JVM_PROPERTIES_FILE)

    def "writes expected properties into file"() {
        given:
        def toolchainRepositoriesResolver = new FakeResolver([
            (createBuildPlatform(Architecture.AARCH64, OperatingSystem.LINUX)): "https://server/whatever1",
            (createBuildPlatform(Architecture.X86_64, OperatingSystem.MAC_OS)): "https://server/whatever2",
            (createBuildPlatform(Architecture.X86, OperatingSystem.WINDOWS)): "https://server/whatever3"
        ])
        def updateDaemonJvmModifier = new UpdateDaemonJvmModifier(toolchainRepositoriesResolver)
        when:
        updateDaemonJvmModifier.updateJvmCriteria(daemonJvmPropertiesFile, JavaVersion.VERSION_11, JvmVendorSpec.IBM, JvmImplementation.VENDOR_SPECIFIC)
        then:
        def props = daemonJvmPropertiesFile.properties
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VERSION_PROPERTY] == "11"
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VENDOR_PROPERTY] == "IBM"
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_IMPLEMENTATION_PROPERTY] == "vendor-specific"
        props[String.format(DaemonJvmPropertiesDefaults.TOOLCHAIN_URL_PROPERTY_FORMAT, "Linux", "Aarch64")] == "https://server/whatever1"
        props[String.format(DaemonJvmPropertiesDefaults.TOOLCHAIN_URL_PROPERTY_FORMAT, "MacOs", "X8664")] == "https://server/whatever2"
        props[String.format(DaemonJvmPropertiesDefaults.TOOLCHAIN_URL_PROPERTY_FORMAT, "Windows", "X86")] == "https://server/whatever3"
        daemonJvmPropertiesFile.text.contains("#This file is generated by " + DaemonJvmPropertiesConfigurator.TASK_NAME)
    }

    def "writes only non-null properties into file"() {
        given:
        def updateDaemonJvmModifier = new UpdateDaemonJvmModifier(new FakeResolver())
        when:
        updateDaemonJvmModifier.updateJvmCriteria(daemonJvmPropertiesFile, JavaVersion.VERSION_11, null, JvmImplementation.VENDOR_SPECIFIC)
        then:
        def props = daemonJvmPropertiesFile.properties
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VERSION_PROPERTY] == "11"
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VENDOR_PROPERTY] == null
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_IMPLEMENTATION_PROPERTY] == "vendor-specific"
    }

    def "writes only java version when no other properties are given"() {
        given:
        def updateDaemonJvmModifier = new UpdateDaemonJvmModifier(new FakeResolver())
        when:
        updateDaemonJvmModifier.updateJvmCriteria(daemonJvmPropertiesFile, JavaVersion.VERSION_11, null, null)
        then:
        def props = daemonJvmPropertiesFile.properties
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VERSION_PROPERTY] == "11"
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VENDOR_PROPERTY] == null
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_IMPLEMENTATION_PROPERTY] == null
    }

    def "existing properties are removed when null is passed"() {
        given:
        def updateDaemonJvmModifier = new UpdateDaemonJvmModifier(new FakeResolver())
        daemonJvmPropertiesFile.text = """
            ${DaemonJvmPropertiesDefaults.TOOLCHAIN_VERSION_PROPERTY}=11
            ${DaemonJvmPropertiesDefaults.TOOLCHAIN_VENDOR_PROPERTY}=IBM
            ${DaemonJvmPropertiesDefaults.TOOLCHAIN_IMPLEMENTATION_PROPERTY}=vendor-specific
        """
        when:
        updateDaemonJvmModifier.updateJvmCriteria(daemonJvmPropertiesFile, JavaVersion.VERSION_15, null, null)
        then:
        def props = daemonJvmPropertiesFile.properties
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VERSION_PROPERTY] == "15"
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VENDOR_PROPERTY] == null
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_IMPLEMENTATION_PROPERTY] == null
    }

    def "existing unrecognized properties are not preserved"() {
        given:
        def updateDaemonJvmModifier = new UpdateDaemonJvmModifier(new FakeResolver())
        daemonJvmPropertiesFile.text = """
            # this comment is not preserved
            com.example.foo=bar
            ${DaemonJvmPropertiesDefaults.TOOLCHAIN_VERSION_PROPERTY}=15
        """
        when:
        updateDaemonJvmModifier.updateJvmCriteria(daemonJvmPropertiesFile, JavaVersion.VERSION_11, JvmVendorSpec.IBM, JvmImplementation.VENDOR_SPECIFIC)
        then:
        def props = daemonJvmPropertiesFile.properties
        props.size() == 3
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VERSION_PROPERTY] == "11"
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_VENDOR_PROPERTY] == "IBM"
        props[DaemonJvmPropertiesDefaults.TOOLCHAIN_IMPLEMENTATION_PROPERTY] == "vendor-specific"
        !daemonJvmPropertiesFile.text.contains("# this comment is not preserved")
    }

    private BuildPlatform createBuildPlatform(Architecture architecture, OperatingSystem operatingSystem) {
        return TestUtil.objectFactory().newInstance(CustomBuildPlatform.class, architecture, operatingSystem)
    }

    private class FakeResolver implements ToolchainRepositoriesResolver {

        private final Map<BuildPlatform, Optional<URI>> toolchainDownloadUrls

        FakeResolver() {
            this.toolchainDownloadUrls = new HashMap<>()
        }

        FakeResolver(Map<BuildPlatform, String> toolchainDownloadUrls) {
            this.toolchainDownloadUrls = toolchainDownloadUrls.collectEntries {key, value ->
                return [key, Optional.of(new URI(value))]
            }
        }

        @Override
        Map<BuildPlatform, Optional<URI>> resolveToolchainDownloadUrlsByPlatform(JavaVersion toolchainVersion, @Nullable JvmVendorSpec toolchainVendor, @Nullable JvmImplementation toolchainImplementation) throws UnconfiguredToolchainRepositoriesResolver {
            return toolchainDownloadUrls
        }
    }
}
